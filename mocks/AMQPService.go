// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import amqp "github.com/streadway/amqp"
import mock "github.com/stretchr/testify/mock"

// AMQPService is an autogenerated mock type for the AMQPService type
type AMQPService struct {
	mock.Mock
}

// Consume provides a mock function with given fields:
func (_m *AMQPService) Consume() (<-chan amqp.Delivery, error) {
	ret := _m.Called()

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func() <-chan amqp.Delivery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueue provides a mock function with given fields:
func (_m *AMQPService) CreateQueue() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Requeue provides a mock function with given fields: oldMsg, newMsg
func (_m *AMQPService) Requeue(oldMsg amqp.Delivery, newMsg amqp.Publishing) error {
	ret := _m.Called(oldMsg, newMsg)

	var r0 error
	if rf, ok := ret.Get(0).(func(amqp.Delivery, amqp.Publishing) error); ok {
		r0 = rf(oldMsg, newMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: pub
func (_m *AMQPService) Send(pub amqp.Publishing) error {
	ret := _m.Called(pub)

	var r0 error
	if rf, ok := ret.Get(0).(func(amqp.Publishing) error); ok {
		r0 = rf(pub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
