// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import amqp "github.com/streadway/amqp"

import mock "github.com/stretchr/testify/mock"

// AMQPConnection is an autogenerated mock type for the AMQPConnection type
type AMQPConnection struct {
	mock.Mock
}

// Channel provides a mock function with given fields:
func (_m *AMQPConnection) Channel() (*amqp.Channel, error) {
	ret := _m.Called()

	var r0 *amqp.Channel
	if rf, ok := ret.Get(0).(func() *amqp.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *AMQPConnection) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyBlocked provides a mock function with given fields: receiver
func (_m *AMQPConnection) NotifyBlocked(receiver chan amqp.Blocking) chan amqp.Blocking {
	ret := _m.Called(receiver)

	var r0 chan amqp.Blocking
	if rf, ok := ret.Get(0).(func(chan amqp.Blocking) chan amqp.Blocking); ok {
		r0 = rf(receiver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan amqp.Blocking)
		}
	}

	return r0
}

// NotifyClose provides a mock function with given fields: receiver
func (_m *AMQPConnection) NotifyClose(receiver chan *amqp.Error) chan *amqp.Error {
	ret := _m.Called(receiver)

	var r0 chan *amqp.Error
	if rf, ok := ret.Get(0).(func(chan *amqp.Error) chan *amqp.Error); ok {
		r0 = rf(receiver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *amqp.Error)
		}
	}

	return r0
}
