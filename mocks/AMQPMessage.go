// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import amqp "github.com/streadway/amqp"
import mock "github.com/stretchr/testify/mock"

// AMQPMessage is an autogenerated mock type for the AMQPMessage type
type AMQPMessage struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: body
func (_m *AMQPMessage) CreateMessage(body interface{}) (amqp.Publishing, error) {
	ret := _m.Called(body)

	var r0 amqp.Publishing
	if rf, ok := ret.Get(0).(func(interface{}) amqp.Publishing); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Get(0).(amqp.Publishing)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKickbackMessage provides a mock function with given fields: msg
func (_m *AMQPMessage) GetKickbackMessage(msg amqp.Delivery) (amqp.Publishing, error) {
	ret := _m.Called(msg)

	var r0 amqp.Publishing
	if rf, ok := ret.Get(0).(func(amqp.Delivery) amqp.Publishing); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(amqp.Publishing)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(amqp.Delivery) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextMessage provides a mock function with given fields: msg, body
func (_m *AMQPMessage) GetNextMessage(msg amqp.Delivery, body interface{}) (amqp.Publishing, error) {
	ret := _m.Called(msg, body)

	var r0 amqp.Publishing
	if rf, ok := ret.Get(0).(func(amqp.Delivery, interface{}) amqp.Publishing); ok {
		r0 = rf(msg, body)
	} else {
		r0 = ret.Get(0).(amqp.Publishing)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(amqp.Delivery, interface{}) error); ok {
		r1 = rf(msg, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
